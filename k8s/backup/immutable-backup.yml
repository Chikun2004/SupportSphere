apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-verification-config
  namespace: support-sphere
data:
  backup.conf: |
    BACKUP_RETENTION_DAYS=365
    BACKUP_VERIFICATION_INTERVAL=3600
    BLOCKCHAIN_NETWORK=ethereum
    SMART_CONTRACT_ADDRESS=0x1234...
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: immutable-backup
  namespace: support-sphere
spec:
  schedule: "*/15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-verifier
            image: backup-tools:latest
            command:
            - /bin/sh
            - -c
            - |
              # Create backup with WORM (Write Once Read Many) protection
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              BACKUP_NAME="support-sphere-${TIMESTAMP}"
              BACKUP_HASH=""
              
              # Create backup with encryption and compression
              tar czf - /data | \
                gpg --encrypt --recipient backup@support-sphere.com \
                > "${BACKUP_NAME}.tar.gz.gpg"
              
              # Calculate backup hash
              BACKUP_HASH=$(sha512sum "${BACKUP_NAME}.tar.gz.gpg" | cut -d' ' -f1)
              
              # Store hash in blockchain for immutability
              eth_transaction=$(curl -X POST -H "Content-Type: application/json" \
                --data "{\"hash\": \"${BACKUP_HASH}\", \"timestamp\": \"${TIMESTAMP}\"}" \
                https://blockchain-api/store)
              
              # Upload to multiple storage classes with WORM protection
              for storage_class in STANDARD GLACIER DEEP_ARCHIVE; do
                aws s3 cp "${BACKUP_NAME}.tar.gz.gpg" \
                  "s3://support-sphere-immutable-backups/${storage_class}/${BACKUP_NAME}.tar.gz.gpg" \
                  --storage-class ${storage_class} \
                  --object-lock-mode COMPLIANCE \
                  --object-lock-retain-until-date $(date -d "+1 year" -u +"%Y-%m-%dT%H:%M:%SZ")
              done
              
              # Verify backup integrity
              for storage_class in STANDARD GLACIER DEEP_ARCHIVE; do
                aws s3 cp \
                  "s3://support-sphere-immutable-backups/${storage_class}/${BACKUP_NAME}.tar.gz.gpg" \
                  "./verify-${storage_class}.tar.gz.gpg"
                
                VERIFY_HASH=$(sha512sum "./verify-${storage_class}.tar.gz.gpg" | cut -d' ' -f1)
                
                if [ "$BACKUP_HASH" != "$VERIFY_HASH" ]; then
                  echo "Backup verification failed for ${storage_class}"
                  exit 1
                fi
                
                # Verify blockchain record
                blockchain_hash=$(curl -X GET \
                  https://blockchain-api/verify/${TIMESTAMP})
                
                if [ "$BACKUP_HASH" != "$blockchain_hash" ]; then
                  echo "Blockchain verification failed for ${storage_class}"
                  exit 1
                fi
              done
              
              # Clean up old backups while maintaining compliance
              aws s3api list-objects-v2 \
                --bucket support-sphere-immutable-backups \
                --prefix "STANDARD/" \
                | jq -r '.Contents[].Key' \
                | while read -r key; do
                  creation_date=$(aws s3api head-object \
                    --bucket support-sphere-immutable-backups \
                    --key "$key" \
                    | jq -r '.LastModified')
                  
                  if [ $(date -d "$creation_date" +%s) -lt $(date -d "-1 year" +%s) ]; then
                    aws s3 mv \
                      "s3://support-sphere-immutable-backups/STANDARD/$key" \
                      "s3://support-sphere-immutable-backups/DEEP_ARCHIVE/$key" \
                      --storage-class DEEP_ARCHIVE
                  fi
                done
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-backup-credentials
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-backup-credentials
                  key: secret-key
            - name: ETHEREUM_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: blockchain-credentials
                  key: private-key
            volumeMounts:
            - name: backup-data
              mountPath: /data
            - name: gpg-keys
              mountPath: /root/.gnupg
          volumes:
          - name: backup-data
            persistentVolumeClaim:
              claimName: backup-data-pvc
          - name: gpg-keys
            secret:
              secretName: backup-gpg-keys
