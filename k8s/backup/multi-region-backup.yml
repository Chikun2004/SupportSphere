apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: support-sphere
data:
  backup-regions: |
    primary: us-west-2
    secondary: us-east-1
    disaster-recovery: eu-west-1
  retention-policy: |
    hourly: 24h
    daily: 7d
    weekly: 30d
    monthly: 365d
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: multi-region-backup
  namespace: support-sphere
spec:
  schedule: "*/30 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-manager
            image: backup-tools:latest
            command:
            - /bin/sh
            - -c
            - |
              # Encrypt and backup application data
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              BACKUP_NAME="support-sphere-${TIMESTAMP}"
              
              # Create encrypted backup
              tar czf - /data | \
                gpg --encrypt --recipient backup@support-sphere.com \
                > "${BACKUP_NAME}.tar.gz.gpg"

              # Upload to multiple regions with versioning
              for region in us-west-2 us-east-1 eu-west-1; do
                aws s3 cp "${BACKUP_NAME}.tar.gz.gpg" \
                  "s3://support-sphere-backups-${region}/encrypted/${BACKUP_NAME}.tar.gz.gpg" \
                  --storage-class STANDARD_IA
              done

              # Verify backup integrity
              for region in us-west-2 us-east-1 eu-west-1; do
                aws s3 cp \
                  "s3://support-sphere-backups-${region}/encrypted/${BACKUP_NAME}.tar.gz.gpg" \
                  "./verify-${region}.tar.gz.gpg"
                
                if ! gpg --decrypt "./verify-${region}.tar.gz.gpg" > /dev/null; then
                  echo "Backup verification failed for region ${region}"
                  exit 1
                fi
              done

              # Cleanup old backups based on retention policy
              for region in us-west-2 us-east-1 eu-west-1; do
                aws s3 ls "s3://support-sphere-backups-${region}/encrypted/" \
                  | awk '{print $4}' \
                  | while read -r file; do
                    timestamp=$(echo "$file" | grep -oP '\d{8}-\d{6}')
                    if [ -n "$timestamp" ]; then
                      age=$(( $(date +%s) - $(date -d "${timestamp:0:8} ${timestamp:9:2}:${timestamp:11:2}:${timestamp:13:2}" +%s) ))
                      if [ $age -gt 2592000 ]; then  # 30 days
                        aws s3 rm "s3://support-sphere-backups-${region}/encrypted/$file"
                      fi
                    fi
                  done
              done
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-backup-credentials
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-backup-credentials
                  key: secret-key
            - name: GPG_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-encryption-key
                  key: private-key
            volumeMounts:
            - name: backup-data
              mountPath: /data
          volumes:
          - name: backup-data
            persistentVolumeClaim:
              claimName: backup-data-pvc
